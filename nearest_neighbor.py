# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-zYU3rH8S65Sl-8SQm2qLbNCCD_6lhU4
"""

"""
①データセットの準備(Sckit-learnで提供されているアヤメのデータを利用)
"""

import numpy as np
import pandas as pd
from sklearn import datasets

# データロード
iris = datasets.load_iris()

# 説明変数
X = iris.data
X = pd.DataFrame(X, columns=["Sepal Length", "Sepal Width", "Petal Length", "Petal Width"])

# 目的変数
Y = iris.target
Y = iris_target = pd.DataFrame(Y, columns = ["Species"])

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

# 学習データおよびテストデータ分割
X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.3, shuffle=True, random_state=3)

# インスタンス
knn = KNeighborsClassifier(n_neighbors=3)

# モデル学習
knn.fit(X_train,Y_train)

# 性能評価
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

# 推論
Y_pred = knn.predict(X_test)

# 性能評価
print("正解率: " + str(round(accuracy_score(Y_test,Y_pred),3)))
print("適合率: " + str(round(precision_score(Y_test,Y_pred, average="macro"),3)))
print("再現率: " + str(round(recall_score(Y_test,Y_pred, average="macro"),3)))

# 出力結果
# 正解率: 0.956
# 適合率: 0.958
# 再現率: 0.952

# kの値を1~90まで変化させた際の正解率・適合率・再現率を観察
import matplotlib.pyplot as plt

accuracy  = []
precision = []
recall    = []

k_range = range(1,100)

for k in k_range:
    
    # モデルインスタンス作成
    knn = KNeighborsClassifier(n_neighbors=k)
    
    # モデル学習
    knn.fit(X_train,Y_train)
    
    # 性能評価
    Y_pred = knn.predict(X_test)
    accuracy.append(round(accuracy_score(Y_test,Y_pred),3))
    precision.append(round(precision_score(Y_test,Y_pred, average="macro"),3))
    recall.append(round(recall_score(Y_test,Y_pred, average="macro"),3))
    
# グラフプロット
plt.plot(k_range, accuracy,  label="accuracy")
plt.plot(k_range, precision, label="precision")
plt.plot(k_range, recall,    label="recall")
plt.legend(loc="best")
plt.show()

# 結果出力
max_accuracy = max(accuracy)
index        = accuracy.index(max_accuracy)
best_k_range = k_range[index]
print("「k="+str(best_k_range)+"」の時、正解率は最大値「"+str(max_accuracy)+"」をとる")

# 出力結果
# 「k=9」の時、正解率は最大値「0.978」をとる